e1<-function(x) { return(1/(2*x))}#
#
curve(e1,from=0.0,to=10.0,ylab=expression(omega[i]),xlab=expression(y[i]),ylim=c(0,1))
?abline
?text
?plotmath
?text
?cat
rnorm(1000,mean=.5,.25)
hist(rnorm(1000,mean=.5,.25)))
hist(rnorm(1000,mean=.5,.25))
100*.1
100^.1
100/.1
.1/100
library(ggplot2)
install.packages(c("ggplot2","igraph","lme4","zelig"),dependencies=T)
install.packages(c("lme4","Zelig"),dependencies=T)
install.packages(c("nlme","Zelig"),dependencies=T)
install.packages(c("plyr","reshape"),dependencies=T)
q()
?q
x<-rnorm(100)
x<-rnorm(100,mean=0,sd=13)
y<-rnorm(100,mean=2,sd=13)
length(which(x>y))
toms.gay<-function(i) {#
    x<-rnorm(1,mean=0,sd=13)#
    y<-rnorm(1,mean=2,sd=13)#
    return(ifelse(x<y,1,0))#
}#
#
sum(sapply(1:1000,toms.gay))
toms.gay<-function(i) {#
    x<-rnorm(1,mean=0,sd=13)#
    y<-rnorm(1,mean=2,sd=13)#
    return(ifelse(x<y,1,0))#
}#
#
sum(sapply(1:10000,toms.gay))
m<-rnorm(10000)
library(ggplot)
library(ggplot2)
w<-seq(0,1,.001)
w
length(w)
length(m)
m<-rnorm(1000)
m
curve()
curve(m)
m
w
length(m)
length(w)
w<-w[1:1000]
length(w)
w
d<-data.frame(m,w)
d
ggplot(d,aes(m))+geom_density()
ggplot(d,aes(m))+geom_density()+geom_point(aes(m/w))
ggplot(d,aes(m))+geom_density()+geom_point(aes(x=m,y=m/w))
ggplot(d,aes(m))+geom_point(aes(x=m,y=m/w))
ggplot(d,aes(m))+geom_point(aes(x=m,y=m/.7))
curve(x/2,from=0,to=10)
p<-curve(x/2,from=0,to=10)
dnorm(1)
curve(dnorm,from=0,to=100)
curve(dnorm,from=-1,to=1)
p<-curve(dnorm,from=-1,to=1)#
p<-p+curve(x/.8,from=0,to=.4)#
print(p)
p<-curve(dnorm,from=0,to=2,xlab="Citizen Belief about m", ylab="")#
p<-p+curve(function(x) x/.8,from=0,to=2,xlab="Citizen Belief about m", ylab="")#
print(p)
curve(function(x) x/2,from=0,to=2,xlab="Citizen Belief about m", ylab="")
curve(function(x) x/2,from=0,to=2)
curve(x/2,from=0,to=2)
curve(x/2,from=0,to=3,xlab="Citizen Belief about m", ylab="")
?recordPlot
?dnorm
m
w
d
ggplot(d,aes(w))+stat_function(fun=dnorm)
ggplot(d,aes(x=w))+stat_function(fun=dnorm)
ggplot(d,aes(x=w)+stat_function(fun=dnorm)
)
ggplot(d,aes(x=w))+stat_function(fun=dnorm)
w
apply(w,dnorm)
apply(w,FUN=dnorm)
sapply(w,dnorm)
library(foreach)
?foreach
install.packages("tm",dependencies=T)
2->a
a
1<->2
install.packages("lavaan",dependencies=T)
library(lavaan)
data(PoliticalDemocracy)
summary(PoliticalDemocracy)
install.packages("proto",dependiencies=T)
install.packages("proto",dependencies=T)
statnet
libarary(statnet)
library(statnet)
data(samplike)
samlike
data(samplik)
library(statnet)
data(samlike)
data()
samplike
samplke
samplk
data(samplike)
data(samplk)
samplk
summary(samplk)
samplk1
library("ROAuth", dependencies=T)
install.packages("ROAuth", dependencies=T)
k<-0
tapply(1:10^7,function(x) k<-k+x)
?tapply
apply(1:10^7,function(x) k<-k+x)
apply(1:10^7,FUN=function(x) k<-k+x)
X<-1L10^7
X<-1^10^7
length(X)
k
lapply(1:10^7,function(x) k<-k+x)
h<-apply(1:10^7,function(x) k<-k+x)
?sapply
h<-sapply(1:10^7,function(x) k<-k+x)
h[1]
length(h)
# File-Name:       speed_test.R                 #
# Date:            2010-06-04                                #
# Author:          Drew Conway                                       #
# Purpose:         #
# Data Used:       #
# Packages Used:          #
# Output File:     #
# Data Output:     #
# Machine:         Drew Conway's MacBook                         #
                                                                    #
# Ex1#
k<-0#
print(system.time(sapply(1:10^7,function(i) k<-k+i)))
# File-Name:       speed_test.R                 #
# Date:            2010-06-04                                #
# Author:          Drew Conway                                       #
# Purpose:         #
# Data Used:       #
# Packages Used:          #
# Output File:     #
# Data Output:     #
# Machine:         Drew Conway's MacBook                         #
                                                                    #
# Ex1#
k<-0#
ex1<-function(x) {#
    for(i in 1:10^7) {#
        x<-x+i#
    }#
}#
print(system.time(ex1(k)))
k<-0#
print(system.time(apply(X=1:10^7,FUN=function(x) k<-k+x)))
dim(1:10^7)
?apply
# File-Name:       speed_test.R                 #
# Date:            2010-06-04                                #
# Author:          Drew Conway                                       #
# Purpose:         #
# Data Used:       #
# Packages Used:          #
# Output File:     #
# Data Output:     #
# Machine:         Drew Conway's MacBook                         #
                                                                    #
# Ex1#
k<-0#
print(system.time(1:10^7,1,function(x) k<-k+x)))
# File-Name:       speed_test.R                 #
# Date:            2010-06-04                                #
# Author:          Drew Conway                                       #
# Purpose:         #
# Data Used:       #
# Packages Used:          #
# Output File:     #
# Data Output:     #
# Machine:         Drew Conway's MacBook                         #
                                                                    #
# Ex1#
k<-0#
print(system.time(1:10^7,1,function(x) k<-k+x))
# File-Name:       speed_test.R                 #
# Date:            2010-06-04                                #
# Author:          Drew Conway                                       #
# Purpose:         #
# Data Used:       #
# Packages Used:          #
# Output File:     #
# Data Output:     #
# Machine:         Drew Conway's MacBook                         #
                                                                    #
# Ex1#
k<-0#
print(system.time(1:10^7,function(x) k<-k+x))
k<-0#
print(system.time(apply(1:10^7,function(x) k<-k+x)))
# File-Name:       speed_test.R                 #
# Date:            2010-06-04                                #
# Author:          Drew Conway                                       #
# Purpose:         #
# Data Used:       #
# Packages Used:          #
# Output File:     #
# Data Output:     #
# Machine:         Drew Conway's MacBook                         #
                                                                    #
# Ex1#
k<-0#
print(system.time(apply(1:10^7,FUN=function(x) k<-k+x)))
k<-0#
print(system.time(apply(1:10^7,1,FUN=function(x) k<-k+x)))
install.packages("foreach",dependencies=T)
library(foreach)
?foreach
k<-0
foreach(i=1:10^7) %do% k<-k+i
foreach(i=1:3) %do%#
  sqrt(i)
foreach(i=1:10^7) %do%
k<-k+i
foreach(i=1:10^7) %do%
function(i) k<-k+i
library(Hmisc)
install.packages("Hmsic",dependencies=T)
install.packages("Hmisc",dependencies=T)
library(Hmisc)
install.packages("rjags",dependencies=T)
library(rjags)
install.packages("rjags")
install.packages("tm")
install.packages("tm",dependencies=T)
?library
install.packages("ggplot2",dependencies=T)
require(maps)
library(ggplot2)
nz <- data.frame(map("af", plot=FALSE)[c("x","y")])
nz <- data.frame(map("ag", plot=FALSE)[c("x","y")])
nz <- data.frame(map("Afghanistan", plot=FALSE)[c("x","y")])
nz <- data.frame(map("afghanistan", plot=FALSE)[c("x","y")])
?maps
nz <- data.frame(map("nz", plot=FALSE)[c("x","y")])
nz
nz <- data.frame(map("af", plot=FALSE)[c("x","y")])
(nzmap <- qplot(x, y, data=nz, geom="path"))
?mapproject
library(maptools)
?mapproject
?maptools
map_data("af")
map_data("Afghanistan")
?map_data
reg <- as.data.frame(map("world", xlim = -c(37.3, 29.4), ylim = c(75.0,60.6), plot = FALSE)[c("x", "y")])
reg <- as.data.frame(map("world", ylim = -c(37.3, 29.4), xlim = c(75.0,60.6), plot = FALSE)[c("x", "y")])
library(ff)
?ff
174*10^1
demo()
revo()
library(topicmodel)
library(topicmodels)
?vcov
const<-rep(1:3,10)
const
m<-rnorm(3)
m
sapply(const,function(i), m[i])
sapply(const,function(i) m[i])
?match
?autoload
library(multicore)
?mclapply
import stats
library(stats)
plnorm(100,log(130), log(10))
plnorm(1,log(130), log(10))
curve(function(x) plnorm(x, log(130),log(10)))
?curve
curve(function(x) plnorm(x, log(130),log(10)),from=0,to=10000)
?curve
curve(function(x) {plnorm(x, log(130),log(10))},from=0,to=10000)
curve(function(x) {plnorm(x, log(130),log(10))},from=1,to=10000)
curve(function(x) {plnorm(x, log(130),log(10))},0,10000)
curve(cosa,0,10000)
curve(cos,0,10000)
f<-function(x) {plnorm(x, log(130),log(10))}
f
f(1)
curve(f,0,10000)
dlnorm(100,log(130),log(10))
f<-function(x) {dlnorm(x, log(130),log(10))}
curve(f,0,10000)
f<-function(x) {dlnorm(x, log(130),log(20))}
curve(f,0,10000)
library(ggplot)
library(ggplot2)
ggplot(as.data.frame(1:100000),aes(V1))+stat_function(fun=f)
as.data.frame(1:100)
ggplot(as.data.frame(1:100000),aes(1:100000)+stat_function(fun=f)+theme_bw()
)
ggplot(as.data.frame(1:100000),aes(1:100000))+stat_function(fun=f)+theme_bw()
f
ggplot(as.data.frame(1:100000),aes(1:100000))+geom_density()+stat_function(fun=f)+theme_bw()
ggplot(as.data.frame(1:100000),aes(1:100000))+stat_function(fun=f)+theme_bw()
x<-1:100000
qplot(x)+stat_function(fun-f)
qplot(x)+stat_function(fun=f)
?as
library(ggplot2)#
library(spatstat)#
library(maptools)#
#
#
to_ppp <- function(long,lat,win){#
    as.ppp(ppp(long,lat,window=win))#
}#
load("afg.data")#
#
afg <- afg.data#
spatstat.options(checkpolygons = FALSE) #
afg$data <- afg$data[!is.na(afg$data$Latitude),]#
#
######## Everything above run before presentation#
#
data = subset(afg$data, Type=="Friendly Fire" & DateOccurred > as.Date("2009-01-01"))#
win = as(afg$outline,"owin")#
points = to_ppp(data$Longitude, data$Latitude, win)#
d = density(points,0.2)#
#
img = t(as.matrix(d))#
df = expand.grid(x=d$xcol, y=d$yrow)#
df$z = melt(img)$value#
#
p = ggplot(df, aes(x=x,y=y))#
p + geom_tile(aes(fill=z))+theme_bw()
library(ggplot2)#
library(spatstat)#
library(maptools)#
#
#
to_ppp <- function(long,lat,win){#
    as.ppp(ppp(long,lat,window=win))#
}#
load("afg.data")#
#
afg <- afg.data#
spatstat.options(checkpolygons = FALSE) #
afg$data <- afg$data[!is.na(afg$data$Latitude),]
data.frame(0:nrow(dd)
)
ls
quit()
setwd("~/Desktop/infochimps/")
package.skeleton(name="infochimps",path="TMP/")
package.skeleton(name="infochimps",path="TMP/",code_files="infochimps.R")
setwd('/Users/agconway/Desktop/infochimps')
# File-Name:       infochimps.R      #
# Date:            2010-09-15                                #
# Author:          Drew Conway#
# Email:           drew.conway@nyu.edu#
# Purpose:         An R wrapper to the infochimps.org API services.#
# Data Used:       #
# Packages Used:   RJSONIO, RCUrl#
# Output File:    #
# Data Output:     #
# Machine:         Drew Conway's MacBook Pro#
#
# Copyright (c) 2010, under the Simplified BSD License.  #
# For more information on FreeBSD see: http://www.opensource.org/licenses/bsd-license.php#
# All rights reserved.#
#
### Load libraries#
require(RJSONIO)#
require(RCurl)#
#
### Global vars#
base.url<-"http://api.infochimps.com/soc/net/tw/"#
de.url<-"http://api.infochimps.com/web/an/de/"#
ip.url<-"http://api.infochimps.com/web/an/ip_census/"#
    #
### Object containing API key#
infochimps<-function(api.key)#
    structure(list(api.key=api.key), class="infochimps")#
                         #
### Wrapper functions#
ip.geo<-function(ip.address,session) {#
    # A function to return Digitial Elements IP Intelligence geo-loaction data#
    # from the infochimps.com API#
    ##
    # Ref: http://api.infochimps.com/describe/web/an/de/geo#
    # #
    # Parameters#
    #   ip.address  : Properly formatted IP address as character string#
    #   session     : Object containing session API key information, created #
    #                   with infochimps() function#
    ##
    # Returns#
    #   list        : see reference for listing of all data returned (extensive)#
    ##
    # Example#
    ##
    #   > nyu<-ip.geo("128.122.79.165",my.infochimps)#
    #   > nyu$zip#
    #   [1] "10003"#
    geo.url<-paste(de.url,"geo.json?ip=",ip.address,"&apikey=",session$api.key,sep="")#
    geo.get<-getURL(geo.url)#
    geo.data<-fromJSON(geo.get)#
    if(is.null(geo.data$error)) {#
        return(geo.data)#
    }#
    else {#
        warning(geo.data$message[[1]])#
        return(NA)#
    }#
}#
#
domain<-function(ip.address,session) {#
    # A function to return Digitial Elements IP domain data#
    # from the infochimps.com API#
    ##
    # Ref: http://api.infochimps.com/describe/web/an/de/domain#
    # #
    # Parameters#
    #   ip.address  : Properly formatted IP address as character string#
    #   session     : Object containing session API key information, created #
    #                   with infochimps() function#
    ##
    # Returns#
    #   list        : domian (character), company (character), isp (character),#
    #                   proxy_type (character), naics_code (numeric)#
    ##
    # Example#
    ##
    #   > nyu<-domain("128.122.79.165",my.infochimps)#
    #   > nyu$isp#
    #   [1] "new york university"#
    ##
    domain.url<-paste(de.url,"domain.json?ip=",ip.address,"&apikey=",session$api.key,sep="")#
    domain.get<-getURL(domain.url)#
    domain.data<-fromJSON(domain.get)#
    if(is.null(domain.data$error)) {#
        return(domain.data)#
    }#
    else {#
        warning(domain.data$message[[1]])#
        return(NA)#
    }#
}#
#
demographics<-function(ip.address,session) {#
    # A function to return infochimps.com census data for a given IP address#
    # from the Digital Elements IP data and U.S. censu data with #
    # infochimps.com APIs.#
    ##
    # Ref: http://api.infochimps.com/describe/web/an/de/demographics#
    # #
    # Parameters#
    #   ip.address  : Properly formatted IP address as character string#
    #   session     : Object containing session API key information, created #
    #                   with infochimps() function#
    ##
    # Returns#
    #   list        : see reference for listing of all data returned (extensive)#
    ##
    # Example#
    ##
    #   > nyu<-demographics("128.122.79.165",my.infochimps)#
    #   > nyu$teens#
    #   [1] 1638#
    ##
    demographics.url<-paste(de.url,"demographics.json?ip=",ip.address,"&apikey=",session$api.key,sep="")#
    demographics.get<-getURL(demographics.url)#
    demographics.data<-fromJSON(demographics.get)#
    if(is.null(demographics.data$error)) {#
        return(demographics.data)#
    }#
    else {#
        warning(demographics.data$message[[1]])#
        return(NA)#
    }#
}#
#
census<-function(ip.address,session) {#
    # A function to return combined census data for a given IP address#
    # using the inforchimps.com APIs#
    ##
    # Ref: http://api.infochimps.com/describe/web/an/ip_census/combined#
    # #
    # Parameters#
    #   ip.address  : Properly formatted IP address as character string#
    #   session     : Object containing session API key information, created #
    #                   with infochimps() function#
    ##
    # Returns#
    #   list        : see reference for listing of all data returned (extensive)#
    ##
    # Example#
    ##
    #   > nyu<-census("128.122.79.165",my.infochimps)#
    #   > nyu$household_income#
    #   [1] "60891"#
    ##
    census.url<-paste(ip.url,"combined.json?ip=",ip.address,"&apikey=",session$api.key,sep="")#
    census.get<-getURL(census.url)#
    census.data<-fromJSON(census.get)#
    if(is.null(census.data$error)) {#
        return(census.data)#
    }#
    else {#
        warning(census.data$message[[1]])#
        return(NA)#
    }#
}#
#
word.stats<-function(tok,session) {#
    # A function to return infochimps.com Word Stats data #
    ##
    # Ref: http://api.infochimps.com/describe/soc/net/tw/word_stats#
    # #
    # Parameters#
    #   tok     : The word you are searching (character)#
    #   session : Object containing session API key information, created #
    #                   with infochimps() function#
    ##
    # Returns#
    #   list    : global_stdev_ppb (numeric), range (numeric), tok (character), global_freq_ppb (numeric)#
    #               If tok not found, return NA#
    ##
    # Example#
    #   > word.stats("infochimps",my.infochimps)#
    #   $global_stdev_ppb#
    #   [1] 25804.38#
    ##
    #   $range#
    #   [1] 1.388452e-05#
    #   #
    #   $tok#
    #   [1] "infochimps"#
    ##
    #   $global_freq_ppb#
    #   [1] 63.7917#
    ##
    word.url<-paste(base.url,"word_stats.json?tok=",tok,"&apikey=",session$api.key,sep="")#
    word.get<-getURL(word.url)#
    word.data<-fromJSON(word.get)#
    # Simple error checking#
    if(is.null(word.data$error)) {#
        return(word.data)#
    }#
    else {#
        warning(word.data$message[[1]])#
        return(NA)#
    }#
}#
#
strong.links<-function(screen.name,session,user.id=NA) {#
    # A function to return infochimps.com Strong Links data #
    ##
    # Ref: http://api.infochimps.com/describe/soc/net/tw/strong_links#
    # #
    # Parameters#
    #   screen.name : The name of a Twitter user#
    #   session     : Object containing session API key information, created #
    #                   with infochimps() function#
    #   user.id     : a Twitter user ID#
    ##
    # Returns#
    #   dataframe   : edgelist with columns: user.id (numeric), strong.link (numeric), link.weight (numeric)#
    #                   If user.name not found, return NA#
    # Example#
    #   > drew.links<-strong.links("drewconway",my.infochimps)#
    #   > head(drew.links)#
    #   > user.id strong.edge link.weight#
    #   1  18463930    43186378    8.541452#
    #   2  18463930    14595061    6.495412#
    #   3  18463930    18914066    6.139707#
    #   4  18463930    11595422    5.752761#
    #   5  18463930    17391971    5.418258#
    #   6  18463930    19042640    5.364032#
    #   #
    if(is.na(user.id)) {#
        strong.url<-paste(base.url,"strong_links.json?screen_name=",screen.name,"&apikey=",session$api.key,sep="")#
    }#
    else{#
        strong.url<-paste(base.url,"strong_links.json?user_id=",user.id,"&apikey=",session$api.key,sep="")#
    }#
    strong.get<-getURL(strong.url)#
    strong.data<-fromJSON(strong.get)#
    # Simple error checking#
    if(is.null(strong.data$error)){#
        strong.edges<-do.call("rbind",strong.data$strong_links)#
        strong.edges<-cbind(strong.data$user_id,strong.edges)#
        strong.df<-as.data.frame(strong.edges)#
        names(strong.df)<-c("user.id","strong.edge","link.weight")#
        return(strong.df)#
    }#
    else{#
        warning(strong.data$message[[1]])#
        return(NA)#
    }#
}#
#
trstrank<-function(screen.name,session,user.id=NA) {#
    # A function to return infochimps.com trstrank score for a Twitter user#
    ##
    # Ref: http://api.infochimps.com/describe/soc/net/tw/trstrank#
    # #
    # Parameters#
    #   screen.name : The name of a Twitter user#
    #   session     : Object containing session API key information, created #
    #                   with infochimps() function#
    #   user.id     : a Twitter user ID#
    ##
    # Returns#
    #   list        : user_id (numeric), screen_name (character), trstrank (numeric), tq (numeric)#
    #                   If user.name not found, return NA#
    # Example#
    #   > trstrank("drewconway",my.infochimps)#
    #   $screen_name#
    #   [1] "drewconway"#
    ##
    #   $tq#
    #   [1] "99"#
    # #
    #   $trstrank#
    #   [1] "3.4"#
    #   #
    #   $user_id#
    #   [1] "18463930"#
    ##
    if(is.na(user.id)) {#
        trstrank.url<-paste(base.url,"trstrank.json?screen_name=",screen.name,"&apikey=",session$api.key,sep="")#
    }#
    else{#
        trstrank.url<-paste(base.url,"trstrank.json?user_id=",user.id,"&apikey=",session$api.key,sep="")#
    }#
    trstrank.get<-getURL(trstrank.url)#
    trstrank.data<-fromJSON(trstrank.get)#
    # Simple error checking#
    if(is.null(trstrank.data$error)) {#
        return(trstrank.data)#
    }#
    else {#
        warning(trstrank.data$message[[1]])#
        return(NA)#
    }#
}#
#
conversations<-function(screen.name.a,screen.name.b,session,user.id.a=NA,user.id.b=NA) {#
    # A function to return the interactions between two Twitter users with infochimps.com API#
    ##
    # Ref: http://api.infochimps.com/describe/soc/net/tw/conversation#
    # #
    # Parameters#
    #   screen.name.a   : The name of a Twitter user#
    #   screen.name.b   : The name of a Twitter user#
    #   session         : Object containing session API key information, created #
    #                       with infochimps() function#
    #   user.id.a       : a Twitter user ID#
    #   user.id.b       : a Twitter user ID#
    ##
    # Returns#
    #   dataframe       : user.id.a (numeric), user.id.b (numeric), conversation.id (numeric), #
    #                       conversation.type (character), reply.to.id (numeric)#
    #                   If user.name not found, or no data, return NA#
    ##
    # Example#
    #   > jd.tweets<-conversations("drewconway","CMastication",my.infochimps)#
    #   > head(jd.tweets)#
    #   user.id.a user.id.b conversation.id conversation.type reply.to.id#
    #   1  18463930  43186378     -1516729932                re -1516729932#
    #   2  18463930  43186378     -1417474753                re -1417474753#
    #   3  18463930  43186378     -1397772779                re -1397772779#
    #   4  18463930  43186378     -1365052144                re -1365052144#
    #   5  18463930  43186378     -1232476200                re -1232476200#
    #   6  18463930  43186378     -1205300652                re -1205300652#
    ##
    # Determine the form of the API request#
    if(is.na(user.id.a) & is.na(user.id.a)) {#
        conversation.url<-paste(base.url,"conversation.json?user_a_sn=",screen.name.a,"&user_b_sn=",screen.name.b,"&apikey=",session$api.key,sep="")#
    }#
    else {#
        if(is.na(user.id.a)==FALSE & is.na(user.id.a)==FALSE) {#
            conversation.url<-paste(base.url,"conversation.json?user_a_id=",user.id.a,"&user_b_id=",user.id.b,"&apikey=",session$api.key,sep="")#
        }#
        else {#
            if(is.na(user.id.na)) {#
                conversation.url<-paste(base.url,"conversation.json?user_a_sn=",screen.name.a,"&user_b_id=",user.id.b,"&apikey=",session$api.key,sep="")#
            }#
            else {#
                conversation.url<-paste(base.url,"conversation.json?user_a_id=",user.id.a,"&user_b_sn=",screen.name.b,"&apikey=",session$api.key,sep="")#
            }#
        }#
    }#
    conversation.get<-getURL(conversation.url)#
    conversation.data<-fromJSON(conversation.get)#
    # Simple error checking#
    if(is.null(conversation.data$error)) {#
        user.id.a<-conversation.data$user_a_id[[1]]#
        user.id.b<-conversation.data$user_b_id[[1]]#
        conversations.matrix<-suppressWarnings(do.call("rbind", conversation.data$conversations))#
        reply.to<-sapply(1:nrow(conversations.matrix), function(x) ifelse(conversations.matrix[x,2]=="re", conversations.matrix[x,3], NA))#
        conversations.df<-cbind(user.id.a, user.id.b, conversations.matrix[,1], conversations.matrix[,2],reply.to)#
        conversations.df<-as.data.frame(conversations.df)#
        names(conversations.df)<-c("user.id.a","user.id.b","conversation.id","conversation.type","reply.to.id")#
        return(conversations.df)#
    }#
    else {#
        warning(conversation.data$message[[1]])#
        return(NA)#
    }#
}#
#
influence<-function(screen.name,session,user.id=NA) {#
    # A function to return infochimps.com influence scores for a Twitter user#
    ##
    # Ref: http://api.infochimps.com/describe/soc/net/tw/influence#
    # #
    # Parameters#
    #   screen.name : The name of a Twitter user#
    #   session     : Object containing session API key information, created #
    #                   with infochimps() function#
    #   user.id     : a Twitter user ID#
    ##
    # Returns#
    #   list        : see reference for listing of all data returned (extensive)#
    # Example#
    #   > drew<-influence("drewconway",my.infochimps)#
    #   > drew$influx#
    #   [1] 1350.52#
    ##
    if(is.na(user.id)) {#
        influence.url<-paste(base.url,"influence.json?screen_name=",screen.name,"&apikey=",session$api.key,sep="")#
    }#
    else{#
        influence.url<-paste(base.url,"influence.json?user_id=",user.id,"&apikey=",session$api.key,sep="")#
    }#
    influence.get<-getURL(influence.url)#
    influence.data<-fromJSON(influence.get)#
    # Simple error checking#
    if(is.null(influence.data$error)){#
        return(influence.data)#
    }#
    else {#
        warning(influence.data$message[[1]])#
        return(NA)#
    }#
}#
#
word.bag<-function(screen.name,session,user.id=NA) {#
    # A function to return infochimps.com Word Bag for a Twitter user#
    ##
    # Ref: http://api.infochimps.com/describe/soc/net/tw/wordbag#
    # #
    # Parameters#
    #   screen.name : The name of a Twitter user#
    #   session     : Object containing session API key information, created #
    #                   with infochimps() function#
    #   user.id     : a Twitter user ID#
    ##
    # Returns#
    #   list        : user_id (numeric), vocab (numeric), total.usages (numeric),#
    #                   tok.df (dataframe) with columns: user.id (numeric), #
    #                   rel.freq (numeric), tok user (character), #
    #                   freq.ppb (numeric)#
    #                   If user.name not found, return NA#
    # Example#
    #   > hilary<-word.bag("hmason",my.infochimps)#
    #   > head(hilary$tok.df)#
    #   user.id rel.freq              tok user.freq.ppb#
    #   1  765548 414954.8         cgra4070      27893.22#
    #   2  765548 414954.8   compsciedufail      27893.22#
    #   3  765548 414954.8 beaveruniversity      27893.22#
    #   4  765548 414954.8        slinfofez      27893.22#
    #   5  765548 414954.8          txtptrn      27893.22#
    #   6  765548 414954.8 loljwuprofessors      27893.22#
    ##
    if(is.na(user.id)) {#
        wordbag.url<-paste(base.url,"wordbag.json?screen_name=",screen.name,"&apikey=",session$api.key,sep="")#
    }#
    else{#
        wordbag.url<-paste(base.url,"wordbag.json?user_id=",user.id,"&apikey=",session$api.key,sep="")#
    }#
    wordbag.get<-getURL(wordbag.url)#
    wordbag.data<-fromJSON(wordbag.get)#
    if(is.null(wordbag.data$error)) {#
        # Get wordbag data#
        words<-do.call("rbind", wordbag.data$toks)#
        words.df<-as.data.frame(cbind(wordbag.data$user_id[[1]],words))#
        names(words.df)<-c("user.id","rel.freq","tok","user.freq.ppb")#
        words.list<-list(user.id=wordbag.data$user_id[[1]],vocab=wordbag.data$vocab[[1]],total.usages=wordbag.data$total_usages[[1]],tok.df=words.df)#
        return(words.list)#
    }#
    else {#
        warning(wordbag.data$message[[1]])#
        return(NA)#
    }#
}
package.skeleton(name="infochimps",path="TMP/")
load("/Users/agconway/Desktop/infochimps/TMP/infochimps/data/base.url.rda")
?lm
?lm
library(ggplot2)
?qplot
library(methods)
setwd('/Users/agconway/Desktop/infochimps/TMP/infochimps/R')
infochimps <-#
function(api.key)#
    structure(list(#
                    api.key=api.key#
                    base="http://api.infochimps.com/soc/net/tw/",#
                    de="http://api.infochimps.com/web/an/de/",#
                    ip="http://api.infochimps.com/web/an/ip_census/"),#
    class="infochimps")
setwd('/Users/agconway/Desktop/infochimps/TMP/infochimps/R')
infochimps <-#
function(api.key)#
    structure(list(api.key=api.key,#
                    base="http://api.infochimps.com/soc/net/tw/",#
                    de="http://api.infochimps.com/web/an/de/",#
                    ip="http://api.infochimps.com/web/an/ip_census/"),#
    class="infochimps")
